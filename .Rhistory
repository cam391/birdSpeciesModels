# Set working directory for different users
setwd("C:/Users/cam391/Documents/GitHub/STOR-565-Group-Project/") # Cam
setwd("C:/Users/cam391/Documents/GitHub/STOR-565-Group-Project/") # Henry
setwd("C:/Users/cam391/Documents/GitHub/STOR-565-Group-Project/") # Johanna
birds <- read_csv("birds.csv",show_col_types = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = 'D:/STOR 565 Project/')
# Set working directory for different users
# setwd("D:/STOR 565 Project/") # Cam
# setwd("C:/Users/Henry Shugart/Documents/GitHub/STOR-565-Group-Project/") # Henry
# setwd("C:/Users/Joe/Documents/GitHub/STOR-565-Group-Project/") # Johanna
library(tidyverse)
library(dplyr)
birds = read_csv("birds.csv", show_col_types = FALSE)
birds$data_set = birds[,4]
n_birds = birds %>% filter(data_set == "train") %>% group_by(labels) %>% summarize(n = n()) %>% arrange(desc(n))
birds_train = birds %>% filter(data_set == "train")
# Explore dimensions of images
library(jpeg)
dim(readJPEG(birds_train$filepaths[1]))
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
for (i in 1:525) {
x_train[i] = unlist(x_train[i])
}
x_train_unlist[1]
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
for (i in 1:525) {
x_train[i] = unlist(x_train[i])
}
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
# for (i in 1:525) {
#   x_train[i] = unlist(x_train[i])
# }
install.packages(keras)
library(keras)
model <- keras_model_sequential()
model %>%
layer_flatten(input_shape = c(224, 224, 3)) %>%
layer_dense(units = 256, activation = 'relu') %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 3, activation = 'softmax')
model <- keras_model_sequential()
model %>%
layer_flatten(input_shape = c(224, 224, 3)) %>%
layer_dense(units = 256, activation = 'relu') %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 3, activation = 'softmax')
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train_unlist, birds_train$labels,
epochs = 30, batch_size = 105,
validation_split = 0.2
)
history <- model %>% fit(
x_train, birds_train$labels,
epochs = 30, batch_size = 105,
validation_split = 0.2
)
# Setup our y_training set
library(caret)
y_train = dummyVars(".~", data = birds_train$labels)
# Setup our y_training set
library(caret)
y_train = dummyVars(labels, data = birds_train)
# Setup our y_training set
library(caret)
y_train = factor(birds_train$labels)
y_train
# Setup our y_training set
library(caret)
sapply(as.character(birds_train$labels), switch, "ABBOTTS BABBLER" = 1, "ABBOTTS BOOBY" = 2, "ABYSSINIAN GROUND HORNBILL" = 3, USE.NAMES = F)
# Setup our y_training set
library(caret)
sapply(as.character(birds_train$labels), switch, "ABBOTTS BABBLER" = 1, "ABBOTTS BOOBY" = 2, "ABYSSINIAN GROUND HORNBILL" = 3, USE.NAMES = F)
head(birds_train)
history <- model %>% fit(
x_train, birds_train$`class index`,
epochs = 30, batch_size = 105,
validation_split = 0.2
)
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
head(x_train)
# for (i in 1:525) {
#   x_train[i] = unlist(x_train[i])
# }
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
x_train[1]
# for (i in 1:525) {
#   x_train[i] = unlist(x_train[i])
# }
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
unlist(x_train[1])
# for (i in 1:525) {
#   x_train[i] = unlist(x_train[i])
# }
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
for (i in 1:525) {
x_train[i] = unlist(x_train[i])
}
x_train[1]
x_train[:][1]
dim(x_train)
len(x_train)
length(x_train)
x_train[[0]]
x_train[,[0]]
x_train[[0],]
View(x_train)
View(x_train)
x_train[[0]]
x_train[0][]
history <- model %>% fit(
x_train, birds_train$`class index`,
epochs = 30, batch_size = 105,
validation_split = 0.2
)
model <- keras_model_sequential()
model %>%
# layer_flatten(input_shape = c(224, 224, 3)) %>%
layer_dense(units = 256, activation = 'relu') %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 3, activation = 'softmax')
history <- model %>% fit(
x_train, birds_train$`class index`,
epochs = 30, batch_size = 105,
validation_split = 0.2
)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, birds_train$`class index`,
epochs = 30, batch_size = 105,
validation_split = 0.2
)
View(x_train)
x_train = lapply(birds_train$filepaths[1:525], readJPEG)
# for (i in 1:525) {
#   x_train[i] = unlist(x_train[i])
# }
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
gc()
